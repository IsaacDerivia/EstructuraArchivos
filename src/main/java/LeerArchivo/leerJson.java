/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package LeerArchivo;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.nio.file.Files;
import java.nio.file.Paths;
import org.json.JSONArray;
import org.json.JSONObject;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.IOException;


/**
 *
 * @author isaac
 */

public class leerJson extends javax.swing.JFrame {

    /**
     * Creates new form leerJson
     */
    public leerJson() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnJsonSimple = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSimple = new javax.swing.JTable();
        btnJsonComplejo = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableComplejo = new javax.swing.JTable();
        btncrear = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(800, 800));
        setMinimumSize(new java.awt.Dimension(800, 800));
        setPreferredSize(new java.awt.Dimension(800, 800));
        setResizable(false);
        setSize(new java.awt.Dimension(800, 800));
        getContentPane().setLayout(null);

        btnJsonSimple.setText("Leer Json Simples");
        btnJsonSimple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJsonSimpleActionPerformed(evt);
            }
        });
        getContentPane().add(btnJsonSimple);
        btnJsonSimple.setBounds(6, 6, 200, 25);

        tableSimple.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableSimple);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 90, 380, 270);

        btnJsonComplejo.setText("Leer Json Complejo");
        btnJsonComplejo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJsonComplejoActionPerformed(evt);
            }
        });
        getContentPane().add(btnJsonComplejo);
        btnJsonComplejo.setBounds(580, 10, 180, 25);

        tableComplejo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableComplejo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableComplejoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableComplejo);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(410, 90, 390, 270);

        btncrear.setText("Insertar");
        btncrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncrearActionPerformed(evt);
            }
        });
        getContentPane().add(btncrear);
        btncrear.setBounds(50, 400, 82, 25);

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscar);
        btnBuscar.setBounds(50, 450, 75, 25);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnJsonSimpleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJsonSimpleActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(
                new FileNameExtensionFilter("Archivos JSON", "json")
        );
        fileChooser.showOpenDialog(this);
        String ruta = fileChooser.getSelectedFile().getAbsolutePath();
        try {
            String contenido = new String(Files.readAllBytes(Paths.get(ruta)));
            JSONArray array = new JSONArray(contenido); // Cambio aquí
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("ID");
            model.addColumn("Nombre");
            model.addColumn("Edad");
            model.addColumn("Puesto");
            for (int i = 0; i < array.length(); i++) {
                JSONObject persona = array.getJSONObject(i);
                model.addRow(new Object[]{
                        persona.getInt("id"), // Añadido aquí
                        persona.getString("nombre"),
                        persona.getInt("edad"),
                        persona.getString("puesto") // Cambiado aquí
                });
            }
            tableSimple.setModel(model);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al leer el archivo");
        }

    }//GEN-LAST:event_btnJsonSimpleActionPerformed

    private void tableComplejoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableComplejoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tableComplejoMouseClicked

    private void btncrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncrearActionPerformed
        // TODO add your handling code here:
        //Se le pide al usuario que eliga en que tabla agregar un nuevo empleado
        String[] options = {"Simple", "Complejo"};
        int response = JOptionPane.showOptionDialog(null, "¿En qué tabla desea agregar un nuevo empleado?", "Agregar empleado", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
        if (response == 0) {
            //Si el usuario elige la tabla simple, se le pide que ingrese los datos del nuevo empleado
            String id = JOptionPane.showInputDialog("Ingrese el ID del empleado:");
            String nombre = JOptionPane.showInputDialog("Ingrese el nombre del empleado:");
            String edad = JOptionPane.showInputDialog("Ingrese la edad del empleado:");
            String puesto = JOptionPane.showInputDialog("Ingrese el puesto del empleado:");
            //Se crea un nuevo objeto JSON con los datos ingresados
            JSONObject nuevoEmpleado = new JSONObject();
            nuevoEmpleado.put("id", Integer.parseInt(id));
            nuevoEmpleado.put("nombre", nombre);
            nuevoEmpleado.put("edad", Integer.parseInt(edad));
            nuevoEmpleado.put("puesto", puesto);
            //Se lee el archivo JSON existente
            String ruta = "/home/isaac/Universidad/Estroctura de archivos/untitled/src/main/java/LeerArchivo/Empleados.json";
            try {
                String contenido = new String(Files.readAllBytes(Paths.get(ruta)));
                JSONArray array = new JSONArray(contenido);
                //Se agrega el nuevo empleado al JSONArray
                array.put(nuevoEmpleado);
                //Se escribe el JSONArray actualizado en el archivo JSON
                Files.write(Paths.get(ruta), array.toString().getBytes());
                //Se vuelve a cargar la tabla con los datos actualizados
                btnJsonSimpleActionPerformed(evt);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al leer el archivo");
            }
        } else if (response == 1) {
            //Si el usuario elige la tabla compleja, se le pide que ingrese los datos del nuevo empleado
            String id = JOptionPane.showInputDialog("Ingrese el ID del empleado:");
            String nombre = JOptionPane.showInputDialog("Ingrese el nombre del empleado:");
            String edad = JOptionPane.showInputDialog("Ingrese la edad del empleado:");
            String puesto = JOptionPane.showInputDialog("Ingrese el puesto del empleado:");
            String calle = JOptionPane.showInputDialog("Ingrese la calle de la dirección del empleado:");
            String ciudad = JOptionPane.showInputDialog("Ingrese la ciudad de la dirección del empleado:");
            String codigoPostal = JOptionPane.showInputDialog("Ingrese el código postal de la dirección del empleado:");
            String telefono = JOptionPane.showInputDialog("Ingrese el teléfono de contacto del empleado:");
            String correo = JOptionPane.showInputDialog("Ingrese el correo de contacto del empleado:");
            //Se crea un nuevo objeto JSON con los datos ingresados
            JSONObject nuevoEmpleado = new JSONObject();
            nuevoEmpleado.put("id", Integer.parseInt(id)); // Añadido aquí
            nuevoEmpleado.put("nombre", nombre);
            nuevoEmpleado.put("edad", Integer.parseInt(edad));
            nuevoEmpleado.put("puesto", puesto);
            JSONObject direccion = new JSONObject();
            direccion.put("calle", calle);
            direccion.put("ciudad", ciudad);
            direccion.put("codigo_postal", codigoPostal);
            nuevoEmpleado.put("direccion", direccion);
            JSONObject contacto = new JSONObject();
            contacto.put("telefono", telefono);
            contacto.put("correo", correo);
            nuevoEmpleado.put("contacto", contacto);
            //Se lee el archivo JSON existente
            String ruta = "/home/isaac/Universidad/Estroctura de archivos/untitled/src/main/java/LeerArchivo/EmpleadoDetallado.json";
            try {
                String contenido = new String(Files.readAllBytes(Paths.get(ruta)));
                JSONArray array = new JSONArray(contenido);
                //Se agrega el nuevo empleado al JSONArray
                array.put(nuevoEmpleado);
                //Se escribe el JSONArray actualizado en el archivo JSON
                Files.write(Paths.get(ruta), array.toString().getBytes());
                //Se vuelve a cargar la tabla con los datos actualizados
                btnJsonComplejoActionPerformed(evt);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al leer el archivo");
            }
        }
    }//GEN-LAST:event_btncrearActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        //escoger en que tabla buscar el ide
        String[] options = {"Simple", "Complejo"};
        int response = JOptionPane.showOptionDialog(null, "¿En qué tabla desea buscar el ID del empleado?", "Buscar empleado", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
        if (response == 0) {
            //Si el usuario elige la tabla simple, se le pide que ingrese el ID del empleado a buscar
            String id = JOptionPane.showInputDialog("Ingrese el ID del empleado:");
            //Se lee el archivo JSON existente
            String ruta = "/home/isaac/Universidad/Estroctura de archivos/untitled/src/main/java/LeerArchivo/Empleados.json";
            try {
                String contenido = new String(Files.readAllBytes(Paths.get(ruta)));
                JSONArray array = new JSONArray(contenido);
                //Se busca el empleado con el ID ingresado
                for (int i = 0; i < array.length(); i++) {
                    JSONObject persona = array.getJSONObject(i);
                    if (persona.getInt("id") == Integer.parseInt(id)) {
                        //Si se encuentra el empleado, se muestra un mensaje con sus datos
                        JOptionPane.showMessageDialog(this, "ID: " + persona.getInt("id") + "\nNombre: " + persona.getString("nombre") + "\nEdad: " + persona.getInt("edad") + "\nPuesto: " + persona.getString("puesto"));
                        return;
                    }
                }
                //Si no se encuentra el empleado, se muestra un mensaje de error
                JOptionPane.showMessageDialog(this, "Empleado no encontrado");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al leer el archivo");
            }
        } else if (response == 1) {
            //Si el usuario elige la tabla compleja, se le pide que ingrese el ID del empleado a buscar
            String id = JOptionPane.showInputDialog("Ingrese el ID del empleado:");
            //Se lee el archivo JSON existente
            String ruta = "/home/isaac/Universidad/Estroctura de archivos/untitled/src/main/java/LeerArchivo/EmpleadoDetallado.json";
            try {
                String contenido = new String(Files.readAllBytes(Paths.get(ruta)));
                JSONArray array = new JSONArray(contenido);
                //Se busca el empleado con el ID ingresado
                for (int i = 0; i < array.length(); i++) {
                    JSONObject persona = array.getJSONObject(i);
                    if (persona.getInt("id") == Integer.parseInt(id)) {
                        //Si se encuentra el empleado, se muestra un mensaje con sus datos
                        JSONObject direccion = persona.getJSONObject("direccion");
                        JSONObject contacto = persona.getJSONObject("contacto");
                        JOptionPane.showMessageDialog(this, "ID: " + persona.getInt("id") + "\nNombre: " + persona.getString("nombre") + "\nEdad: " + persona.getInt("edad") + "\npuesto: " + persona.getString("puesto") + "\nDirección: " + direccion.getString("calle") + ", " + direccion.getString("ciudad") + ", " + direccion.getString("codigo_postal") + "\nContacto: " + contacto.getString("telefono") + ", " + contacto.getString("correo"));
                        return;
                    }

                }
                //Si no se encuentra el empleado, se muestra un mensaje de error
                JOptionPane.showMessageDialog(this, "Empleado no encontrado");
            } catch (
                    IOException e) {
                JOptionPane.showMessageDialog(this, "Error al leer el archivo");
            }
        }

        
    }//GEN-LAST:event_btnBuscarActionPerformed
    /**
     * Este método se activa cuando se hace clic en el botón btnJsonComplejo.
     * Lee un archivo JSON complejo seleccionado por el usuario y carga los datos en una tabla.
     * El archivo JSON debe ser un array de objetos, donde cada objeto tiene las propiedades "id", "nombre", "edad", "puesto", "direccion" y "contacto".
     * Las propiedades "direccion" y "contacto" también son objetos con sus propias propiedades.
     *
     * @param evt El evento de acción que ocurrió (en este caso, hacer clic en el botón).
     */
    private void btnJsonComplejoActionPerformed(java.awt.event.ActionEvent evt) {
        // Crear un selector de archivos
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(
                new FileNameExtensionFilter("Archivos JSON", "json")
        );
        leerJson instance = new leerJson();
        fileChooser.showOpenDialog(instance);
        JOptionPane.showMessageDialog(instance, "Error al leer el archivo");
        instance.setVisible(true);
        String ruta = fileChooser.getSelectedFile().getAbsolutePath();
        try {
            // Leer el archivo seleccionado y convertirlo en un JSONArray
            String contenido = new String(Files.readAllBytes(Paths.get(ruta)));
            JSONArray array = new JSONArray(contenido);

            // Crear un nuevo modelo de tabla y definir las columnas
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("ID");
            model.addColumn("Nombre");
            model.addColumn("Edad");
            model.addColumn("Puesto");
            model.addColumn("Dirección");
            model.addColumn("Ciudad");
            model.addColumn("Código Postal");
            model.addColumn("Teléfono");
            model.addColumn("Correo");

            // Iterar a través de cada objeto en el JSONArray
            for (int i = 0; i < array.length(); i++) {
                // Para cada objeto, extraer los valores de "id", "nombre", "edad", "puesto", "direccion" y "contacto"
                JSONObject persona = array.getJSONObject(i);
                JSONObject direccion = persona.getJSONObject("direccion");
                JSONObject contacto = persona.getJSONObject("contacto");

                // Añadir los valores extraídos como una nueva fila en el modelo de la tabla
                model.addRow(new Object[]{
                        persona.getInt("id"),
                        persona.getString("nombre"),
                        persona.getInt("edad"),
                        persona.getString("puesto"),
                        direccion.getString("calle"),
                        direccion.getString("ciudad"),
                        direccion.getString("codigo_postal"),
                        contacto.getString("telefono"),
                        contacto.getString("correo")
                });
            }

            // Establecer el modelo de la tabla en tableComplejo
            tableComplejo.setModel(model);
        } catch (
                IOException e) {
            // Mostrar un mensaje de error si hubo un problema al leer el archivo
            JOptionPane.showMessageDialog(this, "Error al leer el archivo");

        }
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(leerJson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(leerJson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(leerJson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(leerJson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new leerJson().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnJsonComplejo;
    private javax.swing.JButton btnJsonSimple;
    private javax.swing.JButton btncrear;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableComplejo;
    private javax.swing.JTable tableSimple;
    // End of variables declaration//GEN-END:variables
}

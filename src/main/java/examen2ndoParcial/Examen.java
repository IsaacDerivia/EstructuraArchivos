/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package examen2ndoParcial;

/**
 * @author viejo
 */

//import filechoser y json

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

import org.json.JSONArray;
import org.json.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;


public class Examen extends javax.swing.JFrame {

    /**
     * Creates new form Examen
     */
    public Examen() {
        initComponents();
    }
    //creamos una variable de tipo DefaultTableModel


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        btnNuevo = new javax.swing.JMenuItem();
        btnEditar = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        bntBuscarISBN = new javax.swing.JMenuItem();
        btnBuscarTituloPrincipal = new javax.swing.JMenuItem();
        btnBuscarSubtitulo = new javax.swing.JMenuItem();
        btnBuscarNombreAutor = new javax.swing.JMenuItem();
        btnBuscarApellidoDeAutor = new javax.swing.JMenuItem();
        btnBuscarAñoDePublicacion = new javax.swing.JMenuItem();
        btnBuscarNombreEditorial = new javax.swing.JMenuItem();
        btnBuscarCiudadEditorial = new javax.swing.JMenuItem();
        btnBuscarPrecion = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        btnBuscarArchivo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(900, 800));
        setMinimumSize(new java.awt.Dimension(900, 800));
        setResizable(false);
        setSize(new java.awt.Dimension(900, 800));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setEditable(false);
        jScrollPane1.setViewportView(jTextArea1);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                        "ISBN", "Titulo", "Subtitulo", "Nombre", "Apellido", "Año de publicacion", "Editorial", "Ubicacion", "Precion"
                }
        ));
        jTable1.setDefaultEditor(Object.class, null);

        jTable1.setCellSelectionEnabled(true);
        jScrollPane2.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jMenu1.setText("Opciones");

        btnNuevo.setText("Nuevo");
        btnNuevo.setToolTipText("Agrega Un nuevo libro");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        jMenu1.add(btnNuevo);

        btnEditar.setText("Editar");
        btnEditar.setToolTipText("Edita un libro Deseado");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        jMenu1.add(btnEditar);

        jMenuItem1.setText("Eliminar");
        jMenuItem1.setToolTipText("Elimina un libro");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Buscar");

        bntBuscarISBN.setText("ISBN");
        bntBuscarISBN.setToolTipText("Busca un libro por su ISBN");
        bntBuscarISBN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntBuscarISBNActionPerformed(evt);
            }
        });
        jMenu3.add(bntBuscarISBN);

        btnBuscarTituloPrincipal.setText("Titulo Principal");
        btnBuscarTituloPrincipal.setToolTipText("Busca un libro por su titulo principal");
        btnBuscarTituloPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarTituloPrincipalActionPerformed(evt);
            }
        });
        jMenu3.add(btnBuscarTituloPrincipal);

        btnBuscarSubtitulo.setText("Titulo Subtitulo");
        btnBuscarSubtitulo.setToolTipText("Busca un libro por su subtitulo");
        btnBuscarSubtitulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarSubtituloActionPerformed(evt);
            }
        });
        jMenu3.add(btnBuscarSubtitulo);

        btnBuscarNombreAutor.setText("Nombre del autor");
        btnBuscarNombreAutor.setToolTipText("Busca un libro por el nombre del autor");
        btnBuscarNombreAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarNombreAutorActionPerformed(evt);
            }
        });
        jMenu3.add(btnBuscarNombreAutor);

        btnBuscarApellidoDeAutor.setText("Apellido del autor");
        btnBuscarApellidoDeAutor.setToolTipText("Busca un libro por el apellido del autor");
        btnBuscarApellidoDeAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarApellidoDeAutorActionPerformed(evt);
            }
        });
        jMenu3.add(btnBuscarApellidoDeAutor);

        btnBuscarAñoDePublicacion.setText("Año de publicacion");
        btnBuscarAñoDePublicacion.setToolTipText("Busca por el año que se publico el libro");
        btnBuscarAñoDePublicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarAñoDePublicacionActionPerformed(evt);
            }
        });
        jMenu3.add(btnBuscarAñoDePublicacion);

        btnBuscarNombreEditorial.setText("Nombre Editorial");
        btnBuscarNombreEditorial.setToolTipText("Busca por el nombre de la editorial");
        btnBuscarNombreEditorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarNombreEditorialActionPerformed(evt);
            }
        });
        jMenu3.add(btnBuscarNombreEditorial);

        btnBuscarCiudadEditorial.setText("Ciudad de la Editorial");
        btnBuscarCiudadEditorial.setToolTipText("Busqueda por la ciudad de la editorial");
        btnBuscarCiudadEditorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarCiudadEditorialActionPerformed(evt);
            }
        });
        jMenu3.add(btnBuscarCiudadEditorial);

        btnBuscarPrecion.setText("Precion");
        btnBuscarPrecion.setToolTipText("Busqueda por el precio del libro");
        btnBuscarPrecion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPrecionActionPerformed(evt);
            }
        });
        jMenu3.add(btnBuscarPrecion);

        jMenuBar1.add(jMenu3);

        jMenu2.setText("Abrir Archivo");

        btnBuscarArchivo.setText("Buscador");
        btnBuscarArchivo.setToolTipText("Busca en la computadora en Json");
        btnBuscarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarArchivoActionPerformed(evt);
            }
        });
        jMenu2.add(btnBuscarArchivo);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 831, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(96, 96, 96)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1))
                                .addContainerGap(287, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    //crear una variable global para guardar el archivo seleccionado por el usuario
    private File archivoSeleccionado = null;

    /*
    *  Este metodo se encarga de crear un libro nuevo y agregarlo al archivo json seleccionado por el usuario
    * antes de agregar el libro al archivo se verifica que la tabla no este vacia y que el archivo seleccionado no sea nulo
    * Se le pide al usuario que ingrese los datos del libro y se agregan al archivo
    * Se actualiza la tabla con la informacion del libro y se muestra en el jTextArea1 y la tabla de la interfaz
    * */
    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // TODO add your handling code here:

        //creamos el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();


        // Verificar si la tabla está vacía
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "La tabla está vacía. Por favor, añade al menos un libro antes de continuar.");
            return;
        }


        //se utiliza el archivo seleccionado por el usuarioque se guardo en la variable global
        File archivo = archivoSeleccionado;
        //creamos un objeto de tipo JSONObject
        JSONObject json = new JSONObject();
        //creamos un objeto de tipo JSONObject para el titulo
        JSONObject titulo = new JSONObject();
        //creamos un objeto de tipo JSONObject para el autor
        JSONObject autor = new JSONObject();
        //creamos un objeto de tipo JSONObject para la editorial
        JSONObject editorial = new JSONObject();
        //creamos un JSONArray
        JSONArray jsonArray = new JSONArray();
        //creamos un objeto de tipo FileWriter
        FileWriter file = null;
        try {
            // Leer el archivo JSON existente
            String content = new String(Files.readAllBytes(Paths.get(archivo.getPath())));
            jsonArray = new JSONArray(content);

            //creamos variables que el usuario ingresara para crear un nuevo libro y agregarlo al archivo
            String isbn = JOptionPane.showInputDialog(this, "Ingrese el ISBN del libro");
            String tituloPrincipal = JOptionPane.showInputDialog(this, "Ingrese el titulo principal del libro");
            String subtitulo = JOptionPane.showInputDialog(this, "Ingrese el subtitulo del libro");
            String nombreAutor = JOptionPane.showInputDialog(this, "Ingrese el nombre del autor del libro");
            String apellidoAutor = JOptionPane.showInputDialog(this, "Ingrese el apellido del autor del libro");
            int añoDePublicacion = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese el año de publicacion del libro"));
            String nombreEditorial = JOptionPane.showInputDialog(this, "Ingrese el nombre de la editorial del libro");
            String ciudadEditorial = JOptionPane.showInputDialog(this, "Ingrese la ciudad de la editorial del libro");
            double precio = Double.parseDouble(JOptionPane.showInputDialog(this, "Ingrese el precio del libro"));
            //agregamos los datos al objeto json
            json.put("ISBN", isbn);
            titulo.put("Principal", tituloPrincipal);
            titulo.put("Subtitulo", subtitulo);
            json.put("Titulo", titulo);
            autor.put("Nombre", nombreAutor);
            autor.put("Apellido", apellidoAutor);
            json.put("Autor", autor);
            json.put("Año de Publicacion", añoDePublicacion);
            editorial.put("Nombre", nombreEditorial);
            editorial.put("Ciudad", ciudadEditorial);
            json.put("Editorial", editorial);
            json.put("Precio", precio);
            //agregamos el objeto json al jsonArray
            jsonArray.put(json);

            // Agregar la información del nuevo libro al jTextArea1
            jTextArea1.append("ISBN: " + isbn + "\n");
            jTextArea1.append("Titulo Principal: " + tituloPrincipal + "\n");
            jTextArea1.append("Subtitulo: " + subtitulo + "\n");
            jTextArea1.append("Nombre del Autor: " + nombreAutor + "\n");
            jTextArea1.append("Apellido del Autor: " + apellidoAutor + "\n");
            jTextArea1.append("Año de Publicacion: " + añoDePublicacion + "\n");
            jTextArea1.append("Nombre de la Editorial: " + nombreEditorial + "\n");
            jTextArea1.append("Ciudad de la Editorial: " + ciudadEditorial + "\n");
            jTextArea1.append("Precio: " + precio + "\n");
            // Agregar una línea de separación para cada libro
            jTextArea1.append("\n------------------------");


            //creamos un objeto de tipo FileWriter con el archivo seleccionado
            file = new FileWriter(archivo);
            //escribimos el jsonArray en el archivo
            file.write(jsonArray.toString());
            //cerramos el archivo
            file.close();
            //agregamos una fila a la tabla con la informacion del libro
            model.addRow(new Object[]{isbn, tituloPrincipal, subtitulo, nombreAutor, apellidoAutor, añoDePublicacion, nombreEditorial, ciudadEditorial, precio});
        } catch (IOException e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_btnNuevoActionPerformed


    /*
    *  Metodo que se activa cuando el usuario selecciona editar en el menu de opciones
    * Se le pide al usuario un ISBN para buscar el libro que desea editar
    * Se verifica que la tabla no este vacia y que el archivo seleccionado no sea nulo
    * Se le pide al usuario los datos del libro que desea editar y se actualizan en el archivo
    * Se actualiza la tabla con la informacion del libro y se muestra en el jTextArea1 y la tabla de la interfaz
    * Si el ISBN ingresado por el usuario no existe en el archivo se muestra un mensaje
    *
    *
    * */
    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // TODO add your handling code here:
        //creamos el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        // Verificar si la tabla está vacía
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "La tabla está vacía. Por favor, añade al menos un libro antes de continuar.");
            return;
        }

        //se utiliza el archivo seleccionado por el usuarioque se guardo en la variable global
        File archivo = archivoSeleccionado;
        //se le pide al usuario un ISBN para buscar el libro que desea editar
        String isbn = JOptionPane.showInputDialog(this, "Ingrese el ISBN del libro que desea editar");
        //verificar que el ISBN ingresado por el usuario no sea nulo y que exista en el json para poder editarlo
        if (isbn != null && !isbn.isEmpty()) {
            //creamos un objeto de tipo JSONObject
            JSONObject json = new JSONObject();
            //creamos un objeto de tipo JSONObject para el titulo
            JSONObject titulo = new JSONObject();
            //creamos un objeto de tipo JSONObject para el autor
            JSONObject autor = new JSONObject();
            //creamos un objeto de tipo JSONObject para la editorial
            JSONObject editorial = new JSONObject();
            //creamos un JSONArray
            JSONArray jsonArray = new JSONArray();
            //creamos un objeto de tipo FileWriter
            FileWriter file = null;
            try {
                // Leer el archivo JSON existente
                String content = new String(Files.readAllBytes(Paths.get(archivo.getPath())));
                jsonArray = new JSONArray(content);

                // Iterar sobre cada objeto en el JSONArray
                for (int i = 0; i < jsonArray.length(); i++) {
                    // Obtener el objeto JSON en la posición actual
                    JSONObject libro = jsonArray.getJSONObject(i);
                    // Verificar si el ISBN del libro actual es igual al ISBN ingresado por el usuario
                    if (libro.getString("ISBN").equals(isbn)) {
                        //creamos variables que el usuario ingresara para editar el libro
                        String tituloPrincipal = JOptionPane.showInputDialog(this, "Ingrese el titulo principal del libro");
                        String subtitulo = JOptionPane.showInputDialog(this, "Ingrese el subtitulo del libro");
                        String nombreAutor = JOptionPane.showInputDialog(this, "Ingrese el nombre del autor del libro");
                        String apellidoAutor = JOptionPane.showInputDialog(this, "Ingrese el apellido del autor del libro");
                        int añoDePublicacion = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese el año de publicacion del libro"));
                        String nombreEditorial = JOptionPane.showInputDialog(this, "Ingrese el nombre de la editorial del libro");
                        String ciudadEditorial = JOptionPane.showInputDialog(this, "Ingrese la ciudad de la editorial del libro");
                        double precio = Double.parseDouble(JOptionPane.showInputDialog(this, "Ingrese el precio del libro"));
                        //agregamos los datos al objeto json
                        json.put("ISBN", isbn);
                        titulo.put("Principal", tituloPrincipal);
                        titulo.put("Subtitulo", subtitulo);
                        json.put("Titulo", titulo);
                        autor.put("Nombre", nombreAutor);
                        autor.put("Apellido", apellidoAutor);
                        json.put("Autor", autor);
                        json.put("Año de Publicacion", añoDePublicacion);
                        editorial.put("Nombre", nombreEditorial);
                        editorial.put("Ciudad", ciudadEditorial);
                        json.put("Editorial", editorial);
                        json.put("Precio", precio);
                        //reemplazamos el objeto json en el jsonArray
                        jsonArray.put(i, json);

                        //creamos un objeto de tipo FileWriter con el archivo seleccionado
                        file = new FileWriter(archivo);
                        //escribimos el jsonArray en el archivo
                        file.write(jsonArray.toString());
                        //cerramos el archivo
                        file.close();
                        //actualizamos la fila de la tabla con la informacion del libro
                        model.setValueAt(isbn, i, 0);
                        model.setValueAt(tituloPrincipal, i, 1);
                        model.setValueAt(subtitulo, i, 2);
                        model.setValueAt(nombreAutor, i, 3);
                        model.setValueAt(apellidoAutor, i, 4);
                        model.setValueAt(añoDePublicacion, i, 5);
                        model.setValueAt(nombreEditorial, i, 6);
                        model.setValueAt(ciudadEditorial, i, 7);
                        model.setValueAt(precio, i, 8);

                        // Agregar la información del libro editado al jTextArea1
                        jTextArea1.append("ISBN: " + isbn + "\n");
                        jTextArea1.append("Titulo Principal: " + tituloPrincipal + "\n");
                        jTextArea1.append("Subtitulo: " + subtitulo + "\n");
                        jTextArea1.append("Nombre del Autor: " + nombreAutor + "\n");
                        jTextArea1.append("Apellido del Autor: " + apellidoAutor + "\n");
                        jTextArea1.append("Año de Publicacion: " + añoDePublicacion + "\n");
                        jTextArea1.append("Nombre de la Editorial: " + nombreEditorial + "\n");
                        jTextArea1.append("Ciudad de la Editorial: " + ciudadEditorial + "\n");
                        jTextArea1.append("Precio: " + precio + "\n");
                        // Agregar una línea de separación para cada libro
                        jTextArea1.append("\n------------------------");


                        break;
                    } else if (i == jsonArray.length() - 1) { //si el ISBN ingresado por el usuario no existe en el archivo mostramos un mensaje
                        JOptionPane.showMessageDialog(this, "El ISBN ingresado no existe en el archivo");

                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            //si el ISBN ingresado por el usuario es nulo o vacio mostramos un mensaje
            JOptionPane.showMessageDialog(this, "El ISBN ingresado no es válido");
        }


    }//GEN-LAST:event_btnEditarActionPerformed

    /*
    *  Este metodo empiza cuando el usuario selecciona eliminar en el menu de opciones
    * Se le pide al usuario un ISBN para buscar el libro que desea eliminar
    * Se verifica que la tabla no este vacia y que el archivo seleccionado no sea nulo
    * Se elimina el libro del archivo y se actualiza la tabla con la informacion del libro
    * Se muestra en el jTextArea1 y la tabla de la interfaz
    * Si el ISBN ingresado por el usuario no existe en el archivo se muestra un mensaje
    *
    *
    * */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        //creamos el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        // Verificar si la tabla está vacía
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "La tabla está vacía. Por favor, añade al menos un libro antes de continuar.");
            return;
        }
        //se utiliza el archivo seleccionado por el usuarioque se guardo en la variable global
        File archivo = archivoSeleccionado;
        //se le pide al usuario un ISBN para buscar el libro que desea eliminar
        String isbn = JOptionPane.showInputDialog(this, "Ingrese el ISBN del libro que desea eliminar");
        //verificar que el ISBN ingresado por el usuario no sea nulo y que exista en el json para poder eliminarlo
        if (isbn != null && !isbn.isEmpty()) {
            //creamos un objeto de tipo JSONObject
            JSONObject json = new JSONObject();
            //creamos un JSONArray
            JSONArray jsonArray = new JSONArray();
            //creamos un objeto de tipo FileWriter
            FileWriter file = null;
            try {
                // Leer el archivo JSON existente
                String content = new String(Files.readAllBytes(Paths.get(archivo.getPath())));
                jsonArray = new JSONArray(content);

                // Iterar sobre cada objeto en el JSONArray
                for (int i = 0; i < jsonArray.length(); i++) {
                    // Obtener el objeto JSON en la posición actual
                    JSONObject libro = jsonArray.getJSONObject(i);
                    // Verificar si el ISBN del libro actual es igual al ISBN ingresado por el usuario
                    if (libro.getString("ISBN").equals(isbn)) {
                        // Eliminar el libro del JSONArray
                        jsonArray.remove(i);

                        //creamos un objeto de tipo FileWriter con el archivo seleccionado
                        file = new FileWriter(archivo);
                        //escribimos el jsonArray en el archivo
                        file.write(jsonArray.toString());
                        //cerramos el archivo
                        file.close();
                        //eliminamos la fila de la tabla con la informacion del libro
                        model.removeRow(i);

                        // Agregar la información del libro eliminado al jTextArea1
                        jTextArea1.append("El libro con ISBN " + isbn + " ha sido eliminado\n");
                        // Agregar una línea de separación para cada libro
                        jTextArea1.append("\n------------------------");

                        break;
                    } else if (i == jsonArray.length() - 1) { //si el ISBN ingresado por el usuario no existe en el archivo mostramos un mensaje
                        JOptionPane.showMessageDialog(this, "El ISBN ingresado no existe en el archivo");

                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            //si el ISBN ingresado por el usuario es nulo o vacio mostramos un mensaje
            JOptionPane.showMessageDialog(this, "El ISBN ingresado no es válido");
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed


    /*
    *  Este metodo empiza cuando el usuario selecciona buscar ISBN en el menu de buscar
    * Se le pide al usuario un ISBN para buscar el libro que desea
    * Se verifica que la tabla no este vacia y que el ISBN ingresado por el usuario no sea nulo, sea un numero con -  y exista en la tabla
    * Se subraya la fila y columna seleccionada en la tabla
    * Se muestra un mensaje con la informacion del libro
    * Si el ISBN ingresado por el usuario no existe en la tabla se muestra un mensaje
    * */
    private void bntBuscarISBNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntBuscarISBNActionPerformed
        // TODO add your handling code here:
        //creamos el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        // Verificar si la tabla está vacía
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "La tabla está vacía. Por favor, añade al menos un libro antes de continuar.");
            return;
        }
        //se le pide al usuario un ISBN para buscar el libro que desea
        String isbn = JOptionPane.showInputDialog(this, "Ingrese el ISBN del libro que desea buscar");
        //verificar que el ISBN ingresado por el usuario no sea nulo, sea un numero con -  y exista en la tabla
        if (isbn != null && !isbn.isEmpty() && isbn.matches("[0-9-]+")) {
            // Iterar sobre cada fila en la tabla
            for (int i = 0; i < model.getRowCount(); i++) {
                // Verificar si el ISBN de la fila actual es igual al ISBN ingresado por el usuario
                if (model.getValueAt(i, 0).equals(isbn)) {
                    //subrayamos la fila seleccionada
                    jTable1.setRowSelectionInterval(i, i);
                    //subrayamos la columna seleccionada
                    jTable1.setColumnSelectionInterval(0, 8);
                    //mostramos un mensaje con la informacion del libro
                    JOptionPane.showMessageDialog(this, "ISBN: " + model.getValueAt(i, 0) + "\nTitulo Principal: " + model.getValueAt(i, 1) + "\nSubtitulo: " + model.getValueAt(i, 2) + "\nNombre del Autor: " + model.getValueAt(i, 3) + "\nApellido del Autor: " + model.getValueAt(i, 4) + "\nAño de Publicacion: " + model.getValueAt(i, 5) + "\nNombre de la Editorial: " + model.getValueAt(i, 6) + "\nCiudad de la Editorial: " + model.getValueAt(i, 7) + "\nPrecio: " + model.getValueAt(i, 8));


                    break;
                } else if (i == model.getRowCount() - 1) { //si el ISBN ingresado por el usuario no existe en la tabla mostramos un mensaje
                    JOptionPane.showMessageDialog(this, "El ISBN ingresado no existe en la tabla");
                }
            }
        } else {
            //si el ISBN ingresado por el usuario es nulo, vacio o no es un numero mostramos un mensaje
            JOptionPane.showMessageDialog(this, "El ISBN ingresado no es válido");
        }
    }//GEN-LAST:event_bntBuscarISBNActionPerformed

    /*
    *  Este metodo empiza cuando el usuario selecciona buscar Titulo Principal en el menu de buscar
    * Se le pide al usuario un titulo principal para buscar el libro que desea
    * Se verifica que la tabla no este vacia y que el titulo principal ingresado por el usuario no sea nulo, tenga solo letras y exista en la tabla
    * Se subraya la fila y columna seleccionada en la tabla
    * Se muestra un mensaje con la informacion del libro
    * Si el titulo principal ingresado por el usuario no existe en la tabla se muestra un mensaje
    *
    * */
    private void btnBuscarTituloPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarTituloPrincipalActionPerformed
        // TODO add your handling code here:
        //creamos el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        // Verificar si la tabla está vacía
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "La tabla está vacía. Por favor, añade al menos un libro antes de continuar.");
            return;
        }
        //se le pide al usuario un titulo principal para buscar el libro que desea
        String tituloPrincipal = JOptionPane.showInputDialog(this, "Ingrese el titulo principal del libro que desea buscar");
        //verificar que el titulo principal ingresado por el usuario no sea nulo, tenga solo letrar
        if (tituloPrincipal != null && !tituloPrincipal.isEmpty() && !tituloPrincipal.matches("[0-9]+")) {
            // Iterar sobre cada fila en la tabla
            for (int i = 0; i < model.getRowCount(); i++) {
                // Verificar si el titulo principal de la fila actual es igual al titulo principal ingresado por el usuario
                if (model.getValueAt(i, 1).equals(tituloPrincipal)) {
                    //subrayamos la fila seleccionada
                    jTable1.setRowSelectionInterval(i, i);
                    //subrayamos la columna seleccionada
                    jTable1.setColumnSelectionInterval(0, 8);
                    //mostramos un mensaje con la informacion del libro
                    JOptionPane.showMessageDialog(this, "ISBN: " + model.getValueAt(i, 0) + "\nTitulo Principal: " + model.getValueAt(i, 1) + "\nSubtitulo: " + model.getValueAt(i, 2) + "\nNombre del Autor: " + model.getValueAt(i, 3) + "\nApellido del Autor: " + model.getValueAt(i, 4) + "\nAño de Publicacion: " + model.getValueAt(i, 5) + "\nNombre de la Editorial: " + model.getValueAt(i, 6) + "\nCiudad de la Editorial: " + model.getValueAt(i, 7) + "\nPrecio: " + model.getValueAt(i, 8));

                    break;
                } else if (i == model.getRowCount() - 1) { //si el titulo principal ingresado por el usuario no existe en la tabla mostramos un mensaje
                    JOptionPane.showMessageDialog(this, "El titulo principal ingresado no existe en la tabla");
                }
            }
        } else {
            //si el titulo principal ingresado por el usuario es nulo o vacio mostramos un mensaje
            JOptionPane.showMessageDialog(this, "El titulo principal ingresado no es válido");

        }
    }//GEN-LAST:event_btnBuscarTituloPrincipalActionPerformed

    /*
    *  Este metodo empiza cuando el usuario selecciona buscar Subtitulo en el menu de buscar
    * Se le pide al usuario un subtitulo para buscar el libro que desea
    * Se verifica que la tabla no este vacia y que el subtitulo ingresado por el usuario no sea nulo, tenga solo letras y exista en la tabla
    * Se subraya la fila y columna seleccionada en la tabla
    * Se muestra un mensaje con la informacion del libro
    * Si el subtitulo ingresado por el usuario no existe en la tabla se muestra un mensaje
    *
    * */

    private void btnBuscarSubtituloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarSubtituloActionPerformed
        // TODO add your handling code here:
        //creamos el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        // Verificar si la tabla está vacía
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "La tabla está vacía. Por favor, añade al menos un libro antes de continuar.");
            return;
        }
        //se le pide al usuario un subtitulo para buscar el libro que desea
        String subtitulo = JOptionPane.showInputDialog(this, "Ingrese el subtitulo del libro que desea buscar");
        //verificar que el subtitulo ingresado por el usuario no sea nulo, tenga solo letraS
        if (subtitulo != null && !subtitulo.isEmpty() && !subtitulo.matches("[0-9]+")) {
            // Iterar sobre cada fila en la tabla
            for (int i = 0; i < model.getRowCount(); i++) {
                // Verificar si el subtitulo de la fila actual es igual al subtitulo ingresado por el usuario
                if (model.getValueAt(i, 2).equals(subtitulo)) {
                    //subrayamos la fila seleccionada
                    jTable1.setRowSelectionInterval(i, i);
                    //subrayamos la columna seleccionada
                    jTable1.setColumnSelectionInterval(0, 8);
                    //mostramos un mensaje con la informacion del libro
                    JOptionPane.showMessageDialog(this, "ISBN: " + model.getValueAt(i, 0) + "\nTitulo Principal: " + model.getValueAt(i, 1) + "\nSubtitulo: " + model.getValueAt(i, 2) + "\nNombre del Autor: " + model.getValueAt(i, 3) + "\nApellido del Autor: " + model.getValueAt(i, 4) + "\nAño de Publicacion: " + model.getValueAt(i, 5) + "\nNombre de la Editorial: " + model.getValueAt(i, 6) + "\nCiudad de la Editorial: " + model.getValueAt(i, 7) + "\nPrecio: " + model.getValueAt(i, 8));

                    break;
                } else if (i == model.getRowCount() - 1) { //si el subtitulo ingresado por el usuario no existe en la tabla mostramos un mensaje
                    JOptionPane.showMessageDialog(this, "El subtitulo ingresado no existe en la tabla");
                }
            }
        } else {
            //si el subtitulo ingresado por el usuario es nulo o vacio mostramos un mensaje
            JOptionPane.showMessageDialog(this, "El subtitulo ingresado no es válido");
        }

    }//GEN-LAST:event_btnBuscarSubtituloActionPerformed

    /*
    *  Este metodo empiza cuando el usuario selecciona buscar Año de Publicacion en el menu de buscar
    * Se le pide al usuario un año de publicacion para buscar el libro que desea
    * Se verifica que la tabla no este vacia y que el año de publicacion ingresado por el usuario no sea nulo, sea un numero y exista en la tabla
    * Se subraya la fila y columna seleccionada en la tabla
    * Se muestra un mensaje con la informacion del libro
    * Si el año de publicacion ingresado por el usuario no existe en la tabla se muestra un mensaje
    *
    * */

    private void btnBuscarNombreAutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarNombreAutorActionPerformed
        // TODO add your handling code here:
        //creamos el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        // Verificar si la tabla está vacía
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "La tabla está vacía. Por favor, añade al menos un libro antes de continuar.");
            return;
        }
        //se le pide al usuario un nombre de autor para buscar el libro que desea
        String nombreAutor = JOptionPane.showInputDialog(this, "Ingrese el nombre del autor del libro que desea buscar");
        //verificar que el nombre del autor ingresado por el usuario no sea nulo, tenga solo letraS
        if (nombreAutor != null && !nombreAutor.isEmpty() && !nombreAutor.matches("[0-9]+")) {
            // Iterar sobre cada fila en la tabla
            for (int i = 0; i < model.getRowCount(); i++) {
                // Verificar si el nombre del autor de la fila actual es igual al nombre del autor ingresado por el usuario
                if (model.getValueAt(i, 3).equals(nombreAutor)) {
                    //subrayamos la fila seleccionada
                    jTable1.setRowSelectionInterval(i, i);
                    //subrayamos la columna seleccionada
                    jTable1.setColumnSelectionInterval(0, 8);
                    //mostramos un mensaje con la informacion del libro
                    JOptionPane.showMessageDialog(this, "ISBN: " + model.getValueAt(i, 0) + "\nTitulo Principal: " + model.getValueAt(i, 1) + "\nSubtitulo: " + model.getValueAt(i, 2) + "\nNombre del Autor: " + model.getValueAt(i, 3) + "\nApellido del Autor: " + model.getValueAt(i, 4) + "\nAño de Publicacion: " + model.getValueAt(i, 5) + "\nNombre de la Editorial: " + model.getValueAt(i, 6) + "\nCiudad de la Editorial: " + model.getValueAt(i, 7) + "\nPrecio: " + model.getValueAt(i, 8));

                    break;
                } else if (i == model.getRowCount() - 1) { //si el nombre del autor ingresado por el usuario no existe en la tabla mostramos un mensaje
                    JOptionPane.showMessageDialog(this, "El nombre del autor ingresado no existe en la tabla");
                }
            }
        } else {
            //si el nombre del autor ingresado por el usuario es nulo o vacio mostramos un mensaje
            JOptionPane.showMessageDialog(this, "El nombre del autor ingresado no es válido");
        }

    }//GEN-LAST:event_btnBuscarNombreAutorActionPerformed


    /**
     * Este método se activa cuando el usuario selecciona "Buscar por apellido de autor" en el menú de búsqueda.
     * Solicita al usuario un apellido de autor para buscar el libro deseado.
     * Verifica que la tabla no esté vacía y que el apellido del autor ingresado por el usuario no sea nulo, contenga solo letras y exista en la tabla.
     * Si se encuentra el libro, se resalta la fila y columna seleccionada en la tabla y se muestra un mensaje con la información del libro.
     * Si el apellido del autor ingresado por el usuario no existe en la tabla, se muestra un mensaje.
     *
     *
     */
    private void btnBuscarApellidoDeAutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarApellidoDeAutorActionPerformed
        // TODO add your handling code here:
        //creamos el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        // Verificar si la tabla está vacía
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "La tabla está vacía. Por favor, añade al menos un libro antes de continuar.");
            return;
        }
        //se le pide al usuario un apellido de autor para buscar el libro que desea
        String apellidoAutor = JOptionPane.showInputDialog(this, "Ingrese el apellido del autor del libro que desea buscar");
        //verificar que el apellido del autor ingresado por el usuario no sea nulo, tenga solo letraS
        if (apellidoAutor != null && !apellidoAutor.isEmpty() && !apellidoAutor.matches("[0-9]+")) {
            // Iterar sobre cada fila en la tabla
            for (int i = 0; i < model.getRowCount(); i++) {
                // Verificar si el apellido del autor de la fila actual es igual al apellido del autor ingresado por el usuario
                if (model.getValueAt(i, 4).equals(apellidoAutor)) {
                    //subrayamos la fila seleccionada
                    jTable1.setRowSelectionInterval(i, i);
                    //subrayamos la columna seleccionada
                    jTable1.setColumnSelectionInterval(0, 8);
                    //mostramos un mensaje con la informacion del libro
                    JOptionPane.showMessageDialog(this, "ISBN: " + model.getValueAt(i, 0) + "\nTitulo Principal: " + model.getValueAt(i, 1) + "\nSubtitulo: " + model.getValueAt(i, 2) + "\nNombre del Autor: " + model.getValueAt(i, 3) + "\nApellido del Autor: " + model.getValueAt(i, 4) + "\nAño de Publicacion: " + model.getValueAt(i, 5) + "\nNombre de la Editorial: " + model.getValueAt(i, 6) + "\nCiudad de la Editorial: " + model.getValueAt(i, 7) + "\nPrecio: " + model.getValueAt(i, 8));

                    break;
                } else if (i == model.getRowCount() - 1) { //si el apellido del autor ingresado por el usuario no existe en la tabla mostramos un mensaje
                    JOptionPane.showMessageDialog(this, "El apellido del autor ingresado no existe en la tabla");
                }
            }
        } else {
            //si el apellido del autor ingresado por el usuario es nulo o vacio mostramos un mensaje
            JOptionPane.showMessageDialog(this, "El apellido del autor ingresado no es válido");
        }
    }//GEN-LAST:event_btnBuscarApellidoDeAutorActionPerformed


    /**
     * Este método se activa cuando el usuario selecciona "Buscar por año de publicación" en el menú de búsqueda.
     * Solicita al usuario un año de publicación para buscar el libro deseado.
     * Verifica que la tabla no esté vacía y que el año de publicación ingresado por el usuario no sea nulo, sea un número y exista en la tabla.
     * Si se encuentra el libro, se resalta la fila y columna seleccionada en la tabla y se muestra un mensaje con la información del libro.
     * Si el año de publicación ingresado por el usuario no existe en la tabla, se muestra un mensaje.
     *
     *
     */


    private void btnBuscarAñoDePublicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarAñoDePublicacionActionPerformed
        // TODO add your handling code here:
        //creamos el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        // Verificar si la tabla está vacía
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "La tabla está vacía. Por favor, añade al menos un libro antes de continuar.");
            return;
        }
        //se le pide al usuario un año de publicacion para buscar el libro que desea
        String añoDePublicacion = JOptionPane.showInputDialog(this, "Ingrese el año de publicacion del libro que desea buscar");
        //verificar que el año de publicacion ingresado por el usuario no sea nulo, sea un numero
        if (añoDePublicacion != null && !añoDePublicacion.isEmpty() && añoDePublicacion.matches("[0-9]+")) {
            // Iterar sobre cada fila en la tabla
            for (int i = 0; i < model.getRowCount(); i++) {
                // Verificar si el año de publicacion de la fila actual es igual al año de publicacion ingresado por el usuario
                if (model.getValueAt(i, 5).equals(Integer.parseInt(añoDePublicacion))) {
                    //subrayamos la fila seleccionada
                    jTable1.setRowSelectionInterval(i, i);
                    //subrayamos la columna seleccionada
                    jTable1.setColumnSelectionInterval(0, 8);
                    //mostramos un mensaje con la informacion del libro
                    JOptionPane.showMessageDialog(this, "ISBN: " + model.getValueAt(i, 0) + "\nTitulo Principal: " + model.getValueAt(i, 1) + "\nSubtitulo: " + model.getValueAt(i, 2) + "\nNombre del Autor: " + model.getValueAt(i, 3) + "\nApellido del Autor: " + model.getValueAt(i, 4) + "\nAño de Publicacion: " + model.getValueAt(i, 5) + "\nNombre de la Editorial: " + model.getValueAt(i, 6) + "\nCiudad de la Editorial: " + model.getValueAt(i, 7) + "\nPrecio: " + model.getValueAt(i, 8));

                    break;
                } else if (i == model.getRowCount() - 1) { //si el año de publicacion ingresado por el usuario no existe en la tabla mostramos un mensaje
                    JOptionPane.showMessageDialog(this, "El año de publicacion ingresado no existe en la tabla");
                }
            }
        } else {
            //si el año de publicacion ingresado por el usuario es nulo o vacio mostramos un mensaje
            JOptionPane.showMessageDialog(this, "El año de publicacion ingresado no es válido");
        }
    }//GEN-LAST:event_btnBuscarAñoDePublicacionActionPerformed


    /**
     * Este método se activa cuando el usuario selecciona "Buscar por nombre de editorial" en el menú de búsqueda.
     * Solicita al usuario un nombre de editorial para buscar el libro deseado.
     * Verifica que la tabla no esté vacía y que el nombre de la editorial ingresado por el usuario no sea nulo, contenga solo letras y exista en la tabla.
     * Si se encuentra el libro, se resalta la fila y columna seleccionada en la tabla y se muestra un mensaje con la información del libro.
     * Si el nombre de la editorial ingresado por el usuario no existe en la tabla, se muestra un mensaje.
     *
     *
     */

    private void btnBuscarNombreEditorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarNombreEditorialActionPerformed
        // TODO add your handling code here:
        //creamos el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        // Verificar si la tabla está vacía
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "La tabla está vacía. Por favor, añade al menos un libro antes de continuar.");
            return;
        }
        //se le pide al usuario un nombre de la editorial para buscar el libro que desea
        String nombreEditorial = JOptionPane.showInputDialog(this, "Ingrese el nombre de la editorial del libro que desea buscar");
        //verificar que el nombre de la editorial ingresado por el usuario no sea nulo, tenga solo letraS
        if (nombreEditorial != null && !nombreEditorial.isEmpty() && !nombreEditorial.matches("[0-9]+")) {
            // Iterar sobre cada fila en la tabla
            for (int i = 0; i < model.getRowCount(); i++) {
                // Verificar si el nombre de la editorial de la fila actual es igual al nombre de la editorial ingresado por el usuario
                if (model.getValueAt(i, 6).equals(nombreEditorial)) {
                    //subrayamos la fila seleccionada
                    jTable1.setRowSelectionInterval(i, i);
                    //subrayamos la columna seleccionada
                    jTable1.setColumnSelectionInterval(0, 8);
                    //mostramos un mensaje con la informacion del libro
                    JOptionPane.showMessageDialog(this, "ISBN: " + model.getValueAt(i, 0) + "\nTitulo Principal: " + model.getValueAt(i, 1) + "\nSubtitulo: " + model.getValueAt(i, 2) + "\nNombre del Autor: " + model.getValueAt(i, 3) + "\nApellido del Autor: " + model.getValueAt(i, 4) + "\nAño de Publicacion: " + model.getValueAt(i, 5) + "\nNombre de la Editorial: " + model.getValueAt(i, 6) + "\nCiudad de la Editorial: " + model.getValueAt(i, 7) + "\nPrecio: " + model.getValueAt(i, 8));

                    break;
                } else if (i == model.getRowCount() - 1) { //si el nombre de la editorial ingresado por el usuario no existe en la tabla mostramos un mensaje
                    JOptionPane.showMessageDialog(this, "El nombre de la editorial ingresado no existe en la tabla");
                }
            }
        } else {
            //si el nombre de la editorial ingresado por el usuario es nulo o vacio mostramos un mensaje
            JOptionPane.showMessageDialog(this, "El nombre de la editorial ingresado no es válido");
        }
    }//GEN-LAST:event_btnBuscarNombreEditorialActionPerformed

    /**
     * Este método se activa cuando el usuario selecciona "Buscar por ciudad de la editorial" en el menú de búsqueda.
     * Solicita al usuario una ciudad de la editorial para buscar el libro deseado.
     * Verifica que la tabla no esté vacía y que la ciudad de la editorial ingresada por el usuario no sea nula, contenga solo letras y exista en la tabla.
     * Si se encuentra el libro, se resalta la fila y columna seleccionada en la tabla y se muestra un mensaje con la información del libro.
     * Si la ciudad de la editorial ingresada por el usuario no existe en la tabla, se muestra un mensaje.
     *
     *
     */
    private void btnBuscarCiudadEditorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarCiudadEditorialActionPerformed
        // TODO add your handling code here:
        //creamos el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        // Verificar si la tabla está vacía
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "La tabla está vacía. Por favor, añade al menos un libro antes de continuar.");
            return;
        }
        //se le pide al usuario una ciudad de la editorial para buscar el libro que desea
        String ciudadEditorial = JOptionPane.showInputDialog(this, "Ingrese la ciudad de la editorial del libro que desea buscar");
        //verificar que la ciudad de la editorial ingresada por el usuario no sea nulo, tenga solo letraS
        if (ciudadEditorial != null && !ciudadEditorial.isEmpty() && !ciudadEditorial.matches("[0-9]+")) {
            // Iterar sobre cada fila en la tabla
            for (int i = 0; i < model.getRowCount(); i++) {
                // Verificar si la ciudad de la editorial de la fila actual es igual a la ciudad de la editorial ingresada por el usuario
                if (model.getValueAt(i, 7).equals(ciudadEditorial)) {
                    //subrayamos la fila seleccionada
                    jTable1.setRowSelectionInterval(i, i);
                    //subrayamos la columna seleccionada
                    jTable1.setColumnSelectionInterval(0, 8);
                    //mostramos un mensaje con la informacion del libro
                    JOptionPane.showMessageDialog(this, "ISBN: " + model.getValueAt(i, 0) + "\nTitulo Principal: " + model.getValueAt(i, 1) + "\nSubtitulo: " + model.getValueAt(i, 2) + "\nNombre del Autor: " + model.getValueAt(i, 3) + "\nApellido del Autor: " + model.getValueAt(i, 4) + "\nAño de Publicacion: " + model.getValueAt(i, 5) + "\nNombre de la Editorial: " + model.getValueAt(i, 6) + "\nCiudad de la Editorial: " + model.getValueAt(i, 7) + "\nPrecio: " + model.getValueAt(i, 8));

                    break;
                } else if (i == model.getRowCount() - 1) { //si la ciudad de la editorial ingresada por el usuario no existe en la tabla mostramos un mensaje
                    JOptionPane.showMessageDialog(this, "La ciudad de la editorial ingresada no existe en la tabla");
                }
            }
        } else {
            //si la ciudad de la editorial ingresada por el usuario es nulo o vacio mostramos un mensaje
            JOptionPane.showMessageDialog(this, "La ciudad de la editorial ingresada no es válida");
        }

    }//GEN-LAST:event_btnBuscarCiudadEditorialActionPerformed


    /**
     * Este método se activa cuando el usuario selecciona "Buscar por precio" en el menú de búsqueda.
     * Solicita al usuario un precio para buscar el libro deseado.
     * Verifica que la tabla no esté vacía y que el precio ingresado por el usuario no sea nulo, sea un número y exista en la tabla.
     * Si se encuentra el libro, se resalta la fila y columna seleccionada en la tabla y se muestra un mensaje con la información del libro.
     * Si el precio ingresado por el usuario no existe en la tabla, se muestra un mensaje.
     *
     *
     */

    private void btnBuscarPrecionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPrecionActionPerformed
        // TODO add your handling code here:
        //creamos el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        // Verificar si la tabla está vacía
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "La tabla está vacía. Por favor, añade al menos un libro antes de continuar.");
            return;
        }
        //se le pide al usuario un precio para buscar el libro que desea
        String precio = JOptionPane.showInputDialog(this, "Ingrese el precio del libro que desea buscar");
        //verificar que el precio ingresado por el usuario no sea nulo, sea un numero
        if (precio != null && !precio.isEmpty() && precio.matches("[0-9.]+")) {
            // Iterar sobre cada fila en la tabla
            for (int i = 0; i < model.getRowCount(); i++) {
                // Verificar si el precio de la fila actual es igual al precio ingresado por el usuario
                if (model.getValueAt(i, 8).equals(Double.parseDouble(precio))) {
                    //subrayamos la fila seleccionada
                    jTable1.setRowSelectionInterval(i, i);
                    //subrayamos la columna seleccionada
                    jTable1.setColumnSelectionInterval(0, 8);
                    //mostramos un mensaje con la informacion del libro
                    JOptionPane.showMessageDialog(this, "ISBN: " + model.getValueAt(i, 0) + "\nTitulo Principal: " + model.getValueAt(i, 1) + "\nSubtitulo: " + model.getValueAt(i, 2) + "\nNombre del Autor: " + model.getValueAt(i, 3) + "\nApellido del Autor: " + model.getValueAt(i, 4) + "\nAño de Publicacion: " + model.getValueAt(i, 5) + "\nNombre de la Editorial: " + model.getValueAt(i, 6) + "\nCiudad de la Editorial: " + model.getValueAt(i, 7) + "\nPrecio: " + model.getValueAt(i, 8));

                    break;
                } else if (i == model.getRowCount() - 1) { //si el precio ingresado por el usuario no existe en la tabla mostramos un mensaje
                    JOptionPane.showMessageDialog(this, "El precio ingresado no existe en la tabla");
                }
            }
        } else {
            //si el precio ingresado por el usuario es nulo o vacio mostramos un mensaje
            JOptionPane.showMessageDialog(this, "El precio ingresado no es válido");
        }

    }//GEN-LAST:event_btnBuscarPrecionActionPerformed

    /**
     * Este método se activa cuando el usuario selecciona "Buscar Archivo" en el menú.
     * Crea un objeto JFileChooser y establece un filtro para seleccionar solo archivos con extensión .json.
     * Si el usuario selecciona un archivo, se crea un objeto File con el archivo seleccionado y se guarda en una variable global.
     * Luego, se crea un objeto JSONParser y se lee el archivo seleccionado.
     * Se crea un JSONArray a partir del contenido del archivo y se itera sobre cada objeto en el JSONArray.
     * Para cada objeto, se extraen los detalles del libro y se agregan al jTextArea1 y a la tabla en la interfaz.
     * Si ocurre una excepción de entrada/salida, se imprime la traza de la pila.
     * Si el usuario no selecciona un archivo, se muestra un mensaje.
     *
     *
     */
    private void btnBuscarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarArchivoActionPerformed
        // TODO add your handling code here:
        //creamos un objeto de tipo JFileChooser
        JFileChooser fileChooser = new JFileChooser();
        //creamos un filtro para que solo se puedan seleccionar archivos con extension .json
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos JSON", "json");
        //agregamos el filtro al fileChooser
        fileChooser.setFileFilter(filter);
        //abrimos el fileChooser
        int seleccion = fileChooser.showOpenDialog(this);
        //si seleccionamos un archivo
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            //creamos un objeto de tipo File con el archivo seleccionado
            File archivo = fileChooser.getSelectedFile();
            //guardamos el archivo seleccionado en la variable global
            archivoSeleccionado = archivo;
            //creamos un objeto de tipo JSONParser
            JSONParser parser = new JSONParser();
            //creamos el modelo de la tabla
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();


            try {
                // Crear un objeto FileReader para leer el archivo seleccionado
                FileReader reader = new FileReader(archivo);

                // Leer todo el contenido del archivo en una cadena de texto
                String content = new String(Files.readAllBytes(Paths.get(archivo.getPath())));

                // Crear un JSONArray a partir del contenido del archivo
                JSONArray jsonArray = new JSONArray(content);

                // Iterar sobre cada objeto en el JSONArray
                for (int i = 0; i < jsonArray.length(); i++) {
                    // Obtener el objeto JSON en la posición actual
                    JSONObject json = jsonArray.getJSONObject(i);

                    // Obtener el ISBN del libro y agregarlo al jTextArea1
                    String isbn = json.getString("ISBN");
                    jTextArea1.append("\nISBN: " + isbn);

                    // Obtener el objeto JSON "Titulo" y extraer el título principal y el subtítulo
                    JSONObject titulo = json.getJSONObject("Titulo");
                    String principal = titulo.getString("Principal");
                    String subtitulo = titulo.getString("Subtitulo");
                    jTextArea1.append("\nTitulo Principal: " + principal);
                    jTextArea1.append("\nSubtitulo: " + subtitulo);

                    // Obtener el objeto JSON "Autor" y extraer el nombre y apellido del autor
                    JSONObject autor = json.getJSONObject("Autor");
                    String nombre = autor.getString("Nombre");
                    String apellido = autor.getString("Apellido");
                    jTextArea1.append("\nNombre del Autor: " + nombre);
                    jTextArea1.append("\nApellido del Autor: " + apellido);

                    // Obtener el año de publicación del libro y agregarlo al jTextArea1
                    int añoDePublicacion = json.getInt("Año de Publicacion");
                    jTextArea1.append("\nAño de Publicacion: " + añoDePublicacion);

                    // Obtener el objeto JSON "Editorial" y extraer el nombre y la ciudad de la editorial
                    JSONObject editorial = json.getJSONObject("Editorial");
                    String nombreEditorial = editorial.getString("Nombre");
                    String ciudadEditorial = editorial.getString("Ciudad");
                    jTextArea1.append("\nNombre de la Editorial: " + nombreEditorial);
                    jTextArea1.append("\nCiudad de la Editorial: " + ciudadEditorial);

                    // Obtener el precio del libro y agregarlo al jTextArea1
                    double precio = json.getDouble("Precio");
                    jTextArea1.append("\nPrecio: " + precio);

                    // Agregar una línea de separación para cada libro
                    jTextArea1.append("\n------------------------");

                    // Agregar una fila a la tabla con la información del libro
                    model.addRow(new Object[]{isbn, principal, subtitulo, nombre, apellido, añoDePublicacion, nombreEditorial, ciudadEditorial, precio});

                }
                reader.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            //si no seleccionamos un archivo mostramos un mensaje
            JOptionPane.showMessageDialog(this, "No se selecciono ningun archivo");
        }

    }//GEN-LAST:event_btnBuscarArchivoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Examen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Examen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Examen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Examen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Examen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem bntBuscarISBN;
    private javax.swing.JMenuItem btnBuscarApellidoDeAutor;
    private javax.swing.JMenuItem btnBuscarArchivo;
    private javax.swing.JMenuItem btnBuscarAñoDePublicacion;
    private javax.swing.JMenuItem btnBuscarCiudadEditorial;
    private javax.swing.JMenuItem btnBuscarNombreAutor;
    private javax.swing.JMenuItem btnBuscarNombreEditorial;
    private javax.swing.JMenuItem btnBuscarPrecion;
    private javax.swing.JMenuItem btnBuscarSubtitulo;
    private javax.swing.JMenuItem btnBuscarTituloPrincipal;
    private javax.swing.JMenuItem btnEditar;
    private javax.swing.JMenuItem btnNuevo;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
